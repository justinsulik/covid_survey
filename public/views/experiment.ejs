<!DOCTYPE html>
<html>
    <head>
        <title>Survey</title>
        <script language="javascript" src="libraries/jquery-3.4.1.min.js"></script>
        <script language="javascript" src="libraries/lodash.js"></script>
        <script language="javascript" src="libraries/helper.js"></script>
        <script language="javascript" src="jspsych/jspsych.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-instructions.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-demographics.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-custom-form.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-occupation.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-table-completion.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-likert-customized.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-text.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-multi-select-customized.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-external-html.js"></script>
        <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
        <link href="css/experiment.css" rel="stylesheet" type="text/css"></link>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
    </body>
    <script>

    // prevent backspace from navigating backwards https://stackoverflow.com/questions/11112127/prevent-backspace-from-navigating-back-with-jquery-like-googles-homepage
    $(document).on("keydown", function (e) {
      if (e.which === 8 && !$(e.target).is("input:not([readonly]):not([type=radio]):not([type=checkbox]), textarea, [contentEditable], [contentEditable=true]")) {
        e.preventDefault();
      }
    });

    /*
    Set up: define a few experiment variables
    */

    // get the data passed along by app.js
    var input_data = <%- input_data %>
    var trial_id = input_data.trial_id;
    var lg_dict = input_data.lg_dict;
    var lg = input_data.lg;
    // console.log(trial_id, lg, lg_dict)
    console.log('Rendering trial ', trial_id)

    if(['fa', 'ar'].indexOf(lg)!=-1){
      $('head').append('<link href="css/experiment-rtl.css" rel="stylesheet" type="text/css"></link>');
      $('html').attr('dir', 'rtl');
    } else {
      $('head').append('<link href="css/experiment.css" rel="stylesheet" type="text/css"></link>');
    }
    $('head').attr('lg', lg)

    var phase = input_data.phase;
    var next_phase = phase+1;
    var mobile = input_data.mobile;
    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
       mobile = true;
    }
    jsPsych.data.addProperties({trial_id: trial_id, lg: lg, mobile: mobile});


    var timeline = [];
    var experiment_start_time;
    var data_not_processed = true;
    var dataUrl = '/data?trial_id=' + trial_id;
    var social_network = [];
    var close_network = [];

    // labels

    var agree_labels = lg_dict['10.2'];
    var agree_likert = _.reduce(lg_dict['14.1'], function(acc, d){
      acc.push(d)
      return acc
    }, ['']);
    var morality_labels = lg_dict['6.5'];
    var advice_labels_others = lg_dict['6.16'];
    var advice_labels_self = lg_dict['6.3'];
    var wembs_labels = _.reduce(lg_dict['9.1'], function(acc, d){
      acc.push(d)
      return acc
    }, ['']);
    var vulnerable_labels = lg_dict['7.2'];
    var infected_labels = lg_dict['8.1'];
    var vertical_collectivism_labels = _.map(_.range(10), function(d){
      if(d==1){
        return lg_dict['13.0'][0]
      } else if (d==9) {
        return lg_dict['13.0'][1]
      } else {
        return ''
      }
    });

    // Consent form

    var information = {
      type: 'external-html',
      url: function(){
        return '../views/'+lg+'_information.html'
      },
      check_fn: function(){
        // start the timer once they've clicked "consent"
        experiment_start_time = Date.now();
        return true;
      },
      cont_btn: 'submit'
    }

    // instructions

    var consent = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['1.0'],
      instructions: lg_dict['1.1']+'<br>'+lg_dict['1.2'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      questions: [
        {type: 'checkbox',
        prompt: lg_dict['1.3'],
        id: 'consent',
        columns: 1,
        force_all: true,
        options: lg_dict['1.4'],
        values: [0, 1]}
      ],
      submit: lg_dict['1.5']
    };

    var participant_id = {
      type: 'instructions',
      pages: [lg_dict['2.0'] +'</b><br>' + trial_id +'</b><br>'+lg_dict['2.1']],
      show_clickable_nav: true,
      button_label_next: lg_dict['0.0'],
      button_label_previous: '',
    };

    var social_network_trial = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      add_new: true,
      id: 'social_network',
      column_headers: lg_dict['3.3'],
      column_vals: ['names', 'face', 'video', 'phone', 'email', 'text', 'other'],
      column_icons: true,
      preamble: lg_dict['3.0'],
      instructions: lg_dict['3.1'],
      opt_out: lg_dict['3.2'],
      response_validation: 'force_both',
      new_row_placeholder: lg_dict['3.4'],
      on_finish: function(data){
        var response_data = JSON.parse(data.responses);
        var responses = response_data.responses;
        Object.keys(responses).forEach(function(id){
          if(responses[id].name){
            social_network.push({id: id, row_name: responses[id].name});
          }
        })
      }
    };

    var close_network_trial = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      add_new: false,
      id: 'close_network',
      column_headers: lg_dict['4.1'],
      column_vals: ['name', 'yes', 'no'],
      column_icons: false,
      select_one: true,
      preamble: lg_dict['4.0'],
      row_values: function(){
        return social_network;
      },
      on_finish: function(data){
        var response_data = JSON.parse(data.responses);
        var responses = response_data.responses;
        Object.keys(responses).forEach(function(id){
          if(responses[id].choices.indexOf('yes')!=-1){
            console.log(id, responses[id].name)
            close_network.push({id: id, row_name: responses[id].name});
          }
        })
      }
    };

    var close_network_if = {
      timeline: [close_network_trial],
      conditional_function: function(){
        if(social_network.length>0){
          return true;
        } else {
          return false;
        }
      }
    };

    var close_network_followup = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      add_new: false,
      id: 'close_network_followup',
      column_headers: lg_dict['5.1'],
      column_vals: ['names', 'household', 'country'],
      column_icons: false,
      preamble: lg_dict['5.0'],
      dependencies: 'household>country',
      row_values: function(){
        return close_network;
      }
    };

    var close_network_followup_if = {
      timeline: [close_network_followup],
      conditional_function: function(){
        if(close_network.length>0){
          return true;
        } else {
          return false;
        }
      }
    };

    function socialNetworkprompt(){
      var prompt_string = '<p>'+lg_dict['6.6'];
      if(close_network.length>0){
        prompt_string += ' ' + lg_dict['6.15'] + ' '
        close_network.forEach(function(d, i){
          if(i>0){
            prompt_string += ', '
          }
          prompt_string += d.row_name;
        })
        prompt_string += '. '
      }
      prompt_string += '</p>'
      prompt_string += '<p>'+lg_dict['6.7']+'</p>'
      return prompt_string;
    };

    var compliance = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      select_start: lg_dict['0.2'],
      preamble: lg_dict['6.0'],
      specify_text: lg_dict['0.3'],
      highlight: 'group',
      questions: function(){
        var social_network_prompt = socialNetworkprompt()
        var compliance_cats = ['close_network', 'country', 'world'];
        var compliance_cats_shuffled = jsPsych.randomization.shuffle(compliance_cats);
        var compliance_questions = [
          {type: 'slider',
          prompt: '<p>'+lg_dict['6.1']+'</p>'+
          '<p>'+lg_dict['6.2']+'</p>',
          id: 'comply-self',
          labels: advice_labels_self,
          is_start: true,
          group: 0},
          {type: 'slider',
          prompt: '<p>'+lg_dict['6.4']+'</p>',
          id: 'ethics-self',
          labels: morality_labels,
          group: 0},
        ]
        compliance_cats_shuffled.forEach(function(category, i){
          if(category=='close_network'){
            compliance_questions.push({type: 'slider',
                prompt: social_network_prompt,
                id: 'comply-social',
                labels: advice_labels_others,
                is_start: true,
                group: i+1})
            compliance_questions.push({type: 'slider',
                prompt: '<p>'+lg_dict['6.8']+'</p>',
                id: 'ethics-social',
                labels: morality_labels,
                group: i+1})
          }
          if(category=='country'){
            compliance_questions.push({type: 'slider',
                prompt: '<p>'+lg_dict['6.9']+'</p>'+
                '<p>'+lg_dict['6.10']+'</p>',
                id: 'comply-country',
                labels: advice_labels_others,
                is_start: true,
                group: i+1})
            compliance_questions.push({type: 'slider',
            prompt: '<p>'+lg_dict['6.11']+'</p>',
              id: 'ethics-country',
              labels: morality_labels,
              group: i+1})
          }
          if(category=='world'){
            compliance_questions.push({type: 'slider',
              prompt: '<p>'+lg_dict['6.12']+'</p>'+
              '<p>'+lg_dict['6.13']+'</p>',
              id: 'comply-world',
              labels: advice_labels_others,
              is_start: true,
              group: i+1})
            compliance_questions.push({type: 'slider',
              prompt: '<p>'+lg_dict['6.14']+'</p>',
              id: 'ethics-world',
              labels: morality_labels,
              group: i+1})
          }
        })
        return compliance_questions;
      }
    };

    var vulnerable1 = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      select_start: lg_dict['0.2'],
      preamble: lg_dict['7.0'],
      specify_text: lg_dict['0.3'],
      questions: [
        {type: 'slider',
        prompt: lg_dict['7.1'],
        id: 'vulnerable-self',
        labels: vulnerable_labels},
        {type: 'slider',
        prompt: lg_dict['7.3'],
        id: 'vulnerable-household',
        labels: vulnerable_labels},
        {type: 'slider',
        prompt: lg_dict['7.4'],
        id: 'vulnerable-outside',
        labels: vulnerable_labels},
      ]
    };

    var vulnerable2 = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['8.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      questions: [
        {type: 'slider',
        prompt: lg_dict['7.1'],
        id: 'infected-self',
        labels: infected_labels},
        {type: 'slider',
        prompt: lg_dict['7.3'],
        id: 'infected-household',
        labels: infected_labels},
        {type: 'slider',
        prompt: lg_dict['7.4'],
        id: 'infected-outside',
        labels: infected_labels},
      ]
    };

    var wembs_questions = _.map(_.range(2,13), function(d,i){
      return {
        id: 'wembs_'+i,
        row_name: lg_dict['9.'+d],
      }
    })

    var wembs = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      id: 'wembs',
      preamble: lg_dict['9.0'],
      response_validation: 'force_column',
      column_headers: wembs_labels,
      row_values: wembs_questions,
      highlighting: 'row',
      select_one: true,
    }

    var corona_attitudes = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['10.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      questions: [{
        type: 'slider',
        prompt: lg_dict['10.1'],
        id: 'solidarity',
        labels: agree_labels},
        {type: 'slider',
        prompt: lg_dict['10.3'],
        labels: agree_labels,
        id: 'impact'},
        {type: 'slider',
        prompt: lg_dict['10.4'],
        labels: agree_labels,
        id: 'responsible'},
        {type: 'slider',
        prompt: lg_dict['10.5'],
        id: 'improving',
        labels: agree_labels},
        {type: 'slider',
        prompt: lg_dict['10.6'],
        id: 'going_out',
        labels: lg_dict['10.7']}
      ]
    };

    var science_attitudes = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['11.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      questions: [
        {type: 'slider',
        prompt: lg_dict['11.1'],
        id: 'cred_sci_1',
        labels: agree_labels,
        is_start: true},
        {type: 'slider',
        prompt: lg_dict['11.2'],
        id: 'cred_sci_2',
        labels: agree_labels},
        {type: 'slider',
        prompt: lg_dict['11.3'],
        id: 'cred_sci_3',
        labels: agree_labels},
      ]
    };

    var circle_distances = [1.1, 0.83, 0.63, 0.43, 0];
    var ios_size;
    var ios_font;
    if($(window).width() < 480) {
      ios_size = 48;
      ios_font = 8;
    } else {
      ios_size = 120;
      ios_font = 14;
    }
    console.log($(window).width())
    function generateCircles(distances, label1, label2){
      var width = ios_size;
      console.log(ios_size, $(window).width(), )
      var height = ios_size;
      var base_1 = width/3;
      var base_2 = 2*width/3;
      var base_distance = width/3;
      var circle_ratio = 0.4;
      var options = []
      distances.forEach(function(distance,i){
        var position_1 = base_1 + base_distance*(1-distance)/2
        var position_2 = base_2 - base_distance*(1-distance)/2
        var text_1_y = 5;
        var text_2_y = height-2*(ios_font);
        var img_string = '<div style="height:'+height+'px; width:'+width+'px;" dir="ltr">';
        img_string += '<svg style="display:block;margin:auto;width:'+width+'px; height: '+height+'px">';
        img_string += '<text x="'+position_1+'", y="'+text_1_y+'" dominant-baseline="hanging" text-anchor="middle" fill="blue" font-size="'+ios_font+'">'+label1+'</text>';
        img_string += '<text x="'+position_2+'", y="'+text_2_y+'" dominant-baseline="hanging" text-anchor="middle" fill="red" font-size="'+ios_font+'">'+label2+'</text>';
        img_string += '<circle cx="'+position_1+'" cy="'+height/2+'" r="'+base_distance*circle_ratio+'" fill="blue" fill-opacity="0.4"/>';
        img_string += '<circle cx="'+position_2+'" cy="'+height/2+'" r="'+base_distance*(1-circle_ratio)+'" fill="red" fill-opacity="0.4"/>';
        if(['fa', 'ar'].indexOf(lg)!=-1){
          img_string += '</g>';
        }
        img_string += '</svg></div>';
        options.push(img_string)
      })
      return options;
    };

    var ios_string_country = generateCircles(circle_distances, lg_dict['12.2'], lg_dict['12.3']);
    var ios_string_gvmt = generateCircles(circle_distances, lg_dict['12.2'], lg_dict['12.5']);

    var political_attitudes = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['11.0'],
      instructions: lg_dict['12.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      highlight: 'group',
      questions: [
        {type: 'multiple',
        id: 'ios-country',
        unpadded: true,
        prompt: lg_dict['12.1'],
        options: ios_string_country,
        values: [0, 1, 2, 3, 4],
        group: 0},
        {type: 'checkbox',
        id: 'ios-country-optout',
        options: [lg_dict['0.1']],
        optout_for: 'ios-country',
        group: 0},
        {type: 'multiple',
        id: 'ios-gvmt',
        prompt: lg_dict['12.4'],
        unpadded: true,
        options: ios_string_gvmt,
        values: [0, 1, 2, 3, 4],
        group: 1},
        {type: 'checkbox',
        id: 'ios-gvmt-optout',
        options: [lg_dict['0.1']],
        optout_for: 'ios-gvmt',
        group: 1},
        {type: 'slider',
        id: 'ideology',
        prompt: lg_dict['12.6'],
        labels: lg_dict['12.7'],
        group: 2},
        {type: 'checkbox',
        id: 'ideology-optout',
        optout_for: 'ideology',
        columns: 1,
        options: lg_dict['12.8'],
        values: ['NA', 'None'],
        group: 2}
      ]
    };

    // create items from array forEach

    var vertical_collectivism_row = _.map(_.range(1,9), function(d, i){
      return {id: 'vert_conf_'+i, row_name: lg_dict['13.'+d]}
    });

    var vertical_collectivism = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      highlighting: 'row',
      id: 'vertical_collectivism',
      preamble: lg_dict['11.0'],
      response_validation: 'force_column',
      column_headers: vertical_collectivism_labels,
      select_one: true,
      row_values: vertical_collectivism_row
    };


    var eq_rows = _.map(_.range(2, 17), function(d, i){
      return {id: 'eq_'+i, row_name: lg_dict['14.'+d]}
    });

    var eq = {
      type: 'table-completion',
      submit: lg_dict['0.0'],
      id: 'eq',
      highlighting: 'row',
      row_values: eq_rows,
      column_headers: agree_likert,
      select_one: true,
      response_validation: 'force_column',
      column_vals: ['', 0, 1, 2, 3],
      preamble: lg_dict['14.0']
    };

    var demographics = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      preamble: lg_dict['15.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      highlight: 'group',
      questions: [
        {type: 'text',
        prompt: lg_dict['15.1'],
        placeholder: lg_dict['15.2']+ ": ",
        numeric: true,
        number_valid: lg_dict['15.2'],
        inline: true,
        id: 'age',
        group: 0},
        {type: 'select',
        prompt: lg_dict['15.3']+ ": ",
        id: 'gender',
        inline: true,
        options: lg_dict['15.4'],
        values: ['man', 'woman', 'nb', 'none'],
        group: 1},
        {type: 'select',
        prompt: lg_dict['15.5']+ ": ",
        id: 'education',
        options: lg_dict['15.6'],
        values: [0, 1, 2, 3, 4],
        group: 2},
        {type: 'multiple',
        prompt: lg_dict['15.7'],
        id: 'student',
        options: lg_dict['15.8'],
        values: ['no', 'yes'],
        has_followup: [{id: 'student-type', criterion: 'yes'}, {id: 'student-place', criterion: 'yes'}],
        group: 3},
        {type: 'select',
        prompt: lg_dict['15.9'],
        id: 'student-type',
        options: lg_dict['15.10'],
        values: ['full_time', 'part_time'],
        is_followup: true,
        group: 3},
        {type: 'select',
        prompt: lg_dict['15.11'],
        id: 'student-place',
        options: lg_dict['15.12'],
        values: ['yes', 'sometimes', 'no'],
        is_followup: true,
        group: 3},
        {type: 'multiple',
        prompt: lg_dict['15.13'],
        id: 'work',
        options: lg_dict['15.8'],
        values: ['no', 'yes'],
        has_followup: [{id: 'work-type', criterion: 'yes'}, {id: 'work-place', criterion: 'yes'}],
        group: 4},
        {type: 'select',
        prompt: lg_dict['15.14'],
        id: 'work-type',
        options: lg_dict['15.15'],
        values: ['full_time', 'part_time', 'half_time'],
        is_followup: true,
        group: 4},
        {type: 'select',
        prompt: lg_dict['15.16'],
        id: 'work-place',
        options: lg_dict['15.17'],
        values: ['yes', 'sometimes', 'no'],
        is_followup: true,
        group: 4},
        {type: 'text',
        prompt: '<p>'+lg_dict['15.18']+'</p>'+lg_dict['15.19'][0],
        placeholder: lg_dict['15.19'][0],
        id: 'country_now',
        group: 5},
        {type: 'text',
        prompt: lg_dict['15.19'][1],
        placeholder: lg_dict['15.19'][1],
        id: 'state_now',
        optional: true,
        group: 5},
        {type: 'text',
        prompt: lg_dict['15.19'][2],
        placeholder: lg_dict['15.19'][2],
        id: 'city_now',
        group: 5},
        {type: 'text',
        prompt: '<p>'+lg_dict['15.20']+'</p>'+lg_dict['15.19'][0],
        placeholder: lg_dict['15.19'][0],
        id: 'country_old',
        group: 6},
        {type: 'text',
        prompt: lg_dict['15.19'][1],
        placeholder: lg_dict['15.19'][1],
        optional: true,
        id: 'state_old',
        group: 6},
        {type: 'text',
        prompt: lg_dict['15.19'][2],
        placeholder: lg_dict['15.19'][2],
        id: 'city_old',
        group: 6},
        {type: 'select',
        prompt: lg_dict['15.21'],
        id: 'household-number',
        options: numericOptions(11, true),
        values:  numericOptions(11),
        group: 7,
        has_followup: [{id: 'household-children', criterion: function(val){
            return val > 0;
            }
          },
        {id: 'household-elderly', criterion: function(val){
            return val > 0;
            }
          }
        ]},
        {type: 'select',
        prompt: lg_dict['15.22'],
        id: 'household-children',
        options: numericOptions(11, true),
        group: 7,
        is_followup: true},
        {type: 'select',
        prompt: lg_dict['15.23'],
        id: 'household-elderly',
        options: numericOptions(11, true),
        group: 7,
        is_followup: true}
      ]
    };

    var occupation = {
      type: 'occupation',
      dict: lg_dict,
      preamble: lg_dict['16.0'],
      instructions: lg_dict['16.1'],
      submit: lg_dict['0.0']
    };

    var email = {
      type: 'custom-form',
      submit: lg_dict['0.0'],
      select_start: lg_dict['0.2'],
      specify_text: lg_dict['0.3'],
      questions: [{
        prompt: '<p>'+lg_dict['17.0']+'</p>'+
        '<p style="font-size: 0.74em">'+lg_dict['17.1']+'</p>',
        placeholder: lg_dict['17.2'],
        type: 'text',
        id: 'email',
        optional: true,
        email: true,
        email_valid: lg_dict['17.2']
      }]
    };

    var warning = {
      type: 'instructions',
      pages: ['On some browsers, the message on the FOLLOWING screen may hang. '+
      'Please ignore it if it does! '+
      'Press NEXT to finish the experiment.'],
      show_clickable_nav: true
    }

    /*
    Add trials to the timeline
    */

    timeline.push(information);
    timeline.push(consent);
    timeline.push(participant_id);

    timeline.push(social_network_trial);
    timeline.push(close_network_if);
    timeline.push(close_network_followup_if);

    timeline.push(compliance);

    timeline.push(vulnerable1);
    timeline.push(vulnerable2);
    timeline.push(wembs);

    timeline.push(corona_attitudes);
    timeline.push(science_attitudes);
    timeline.push(political_attitudes);

    timeline.push(vertical_collectivism);
    timeline.push(eq);
    timeline.push(demographics);
    timeline.push(occupation);
    timeline.push(email);

    /*
    Have jsPsych display the experiment timeline
    */

    jsPsych.init({
        // uncomment if you need to preload anything that isn't a stim in an existing jspsych plugin
        preload_images: [],
        default_iti: 500,
        show_progress_bar: true,
        experiment_width: 800,
        timeline: timeline,
        on_finish: function(){
          console.log('Experiment completed...')
          var data = helper.prepareData(experiment_start_time);
          helper.save(data, dataUrl, trial_id, lg);
        }
    });

    function numericOptions(range, plus=false){
      return _.map(_.range(0,range), function(acc, i){
        if(i==range-1 && plus){
          return i+'+';
        } else {
          return i;
        }
      });
    }

    </script>
</html>
